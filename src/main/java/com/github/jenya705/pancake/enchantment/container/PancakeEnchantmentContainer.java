package com.github.jenya705.pancake.enchantment.container;

import com.github.jenya705.pancake.enchantment.PancakeEnchantmentObject;
import com.github.jenya705.pancake.enchantment.rarity.PancakeEnchantmentRarity;
import com.github.jenya705.pancake.item.PancakeItemSource;
import com.github.jenya705.pancake.item.PancakeItemStack;
import com.github.jenya705.pancake.item.event.PancakeItemEvent;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.enchantments.EnchantmentTarget;

import java.util.function.BiFunction;

/**
 * Container of enchantment used by pancake
 * @param <T> Source type
 */
public interface PancakeEnchantmentContainer<T> {

    /**
     *
     * Return builder of pancake enchantment container
     *
     * @return builder
     */
    static <T> PancakeEnchantmentContainerImpl.PancakeEnchantmentContainerImplBuilder<T> builder(T source) {
        return new PancakeEnchantmentContainerImpl.PancakeEnchantmentContainerImplBuilder<T>().source(source);
    }

    /**
     *
     * Return localized name of enchantment (e.g. Fire protection)
     *
     * @return localized name of enchantment
     */
    String getName();

    /**
     *
     * Return id of enchantment (e.g. minecraft:fire_protection)
     *
     * @return Id of enchantment
     */
    String getId();

    /**
     *
     * Return target of enchantment
     *
     * @return Target of enchantment
     */
    EnchantmentTarget getTarget();

    /**
     *
     * Return rarity of enchantment
     *
     * @return Rarity of enchantment
     */
    PancakeEnchantmentRarity getRarity();

    /**
     *
     * Checks if that enchantment conflicts with this enchantment
     *
     * @param enchantmentID Enchantment id
     * @return is that enchantment conflicts with this enchantment
     */
    boolean isConflict(String enchantmentID);

    /**
     *
     * Checks if this enchantment can be found in villager trades.
     *
     * @return true if the enchantment can be found in trades
     */
    boolean isTreasure();

    /**
     *
     * Checks if this enchantment can be found in an enchanting table or use to enchant items generated by loot tables.
     *
     * @return true if the enchantment can be found in a table or by loot tables
     */
    boolean isTradeable();

    /**
     * Checks if this enchantment is a treasure enchantment.
     * <br>
     * Treasure enchantments can only be received via looting, trading, or
     * fishing.
     *
     * @return true if the enchantment is a treasure enchantment
     */
    boolean isDiscoverable();

    /**
     *
     * Check if this enchantment can apply to this item
     *
     * @param itemStack Item
     * @return true if this enchantment can apply to this item
     */
    boolean canApply(PancakeItemStack itemStack);

    /**
     *
     * Return bukkit enchantment wrapper
     *
     * @return bukkit enchantment wrapper
     */
    Enchantment getWrapper();

    /**
     *
     * Return source object
     *
     * @return source object
     */
    T getSource();

    /**
     *
     * Max level of enchantment can not be less than startLevel
     *
     * @return Max level of enchantment
     */
    int getMaxLevel();

    /**
     *
     * Start level of enchantment can not be more than maxLevel
     *
     * @return Start level of enchantment
     */
    int getStartLevel();

    /**
     *
     * Return minimal cost of this enchantment depends on level
     *
     * @param level Level
     * @return Minimal cost
     */
    int getMinCost(int level);

    /**
     *
     * Return maximal cost of this enchantment depends on level
     *
     * @param level Level
     * @return maximal cost
     */
    int getMaxCost(int level);

    /**
     *
     * Invoke handlers of given event with given source and arguments event and enchantmentObject
     *
     * @throws IllegalArgumentException if container is not container of given enchantment object
     * @param event Invoking event
     * @param source Source of handlers
     * @param enchantmentObject Enchantment object
     */
    void invokeEvent(PancakeItemEvent event, PancakeItemSource source, PancakeEnchantmentObject enchantmentObject);

    /**
     *
     * Add source handler of given event
     *
     * @param eventClazz Event class
     * @param source Handler source
     * @param handler Handler function
     */
    void addHandler(Class<? extends PancakeItemEvent> eventClazz, PancakeItemSource source, BiFunction<PancakeItemEvent, PancakeEnchantmentObject, Void> handler);

}
