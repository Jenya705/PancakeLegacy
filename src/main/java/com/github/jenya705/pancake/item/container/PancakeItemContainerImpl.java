package com.github.jenya705.pancake.item.container;

import com.github.jenya705.pancake.Pancake;
import com.github.jenya705.pancake.item.PancakeItem;
import com.github.jenya705.pancake.item.model.CustomModelItem;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import org.bukkit.Material;

import java.util.Locale;
import java.util.Objects;

@Setter(AccessLevel.PROTECTED)
@Getter
public class PancakeItemContainerImpl<T> extends EventablePancakeItemContainer<T> {

    private String name;
    private Material material;
    private T source;
    private String id;
    private int additionalEnchantmentCost;
    private int customModelData;

    /**
     * @param source Source object
     * @param customModelData custom model id (by default generated by Pancake)
     * @throws IllegalArgumentException if source doesn't have {@link PancakeItem} annotation
     */
    public PancakeItemContainerImpl(T source, int customModelData) {
        Class<?> clazz = source.getClass();
        PancakeItem pancakeItemAnnotation = clazz.getAnnotation(PancakeItem.class);
        if (pancakeItemAnnotation == null) {
            throw new IllegalArgumentException("Source doesn't have PancakeItem annotation");
        }
        setValues(source, pancakeItemAnnotation, customModelData);
    }

    /**
     * @param source Source object
     * @param pancakeItemAnnotation PancakeItem annotation
     * @param customModelData custom model id (by default generated by Pancake)
     */
    public PancakeItemContainerImpl(T source, PancakeItem pancakeItemAnnotation, int customModelData) {
        setValues(source, pancakeItemAnnotation, customModelData);
    }

    /**
     * @param source Source object
     */
    public PancakeItemContainerImpl(T source) {
        Class<?> clazz = source.getClass();
        PancakeItem pancakeItemAnnotation = clazz.getAnnotation(PancakeItem.class);
        if (pancakeItemAnnotation == null) {
            throw new IllegalArgumentException("Source doesn't have PancakeItem annotation");
        }
        setValues(source, pancakeItemAnnotation);
    }

    /**
     * @param source Source object
     * @param pancakeItemAnnotation pancake item annotation
     */
    public PancakeItemContainerImpl(T source, PancakeItem pancakeItemAnnotation) {
        setValues(source, pancakeItemAnnotation);
    }

    protected void setValues(T source, PancakeItem pancakeItemAnnotation, int customModelData) {
        setCustomModelData(customModelData);
        setName(pancakeItemAnnotation.name());
        setId(pancakeItemAnnotation.id().toLowerCase(Locale.ROOT));
        setAdditionalEnchantmentCost(pancakeItemAnnotation.additionalEnchantmentCost());
        setMaterial(pancakeItemAnnotation.material());
        setSource(source);
    }

    protected void setValues(T source, PancakeItem pancakeItemAnnotation) {
        setName(pancakeItemAnnotation.name());
        setId(pancakeItemAnnotation.id().toLowerCase(Locale.ROOT));
        setAdditionalEnchantmentCost(pancakeItemAnnotation.additionalEnchantmentCost());
        setMaterial(pancakeItemAnnotation.material());
        setSource(source);
        setCustomModelData(getSource() instanceof CustomModelItem ?
                Pancake.getPlugin().getCustomModelDataContainer().getCustomModelData(this) : 0);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        PancakeItemContainerImpl<?> that = (PancakeItemContainerImpl<?>) o;
        return name.equals(that.name) && material == that.material && id.equals(that.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

}

